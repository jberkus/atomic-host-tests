---
# vim: set ft=ansible:
#
- name: Include common vars
  include_vars: common.yml

- name: Include distribution specific vars
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution|lower }}-{{ ansible_distribution_version }}.yml"
    - "{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution|lower }}.yml"

- name: Fail if required variables are not defined
  fail:
    msg: "The required variables are not defined.  Check files under roles/selinux_verify/vars/"
  when: mountpoints is undefined or
        common_files is undefined or
        common_procs is undefined or
        distro_files is undefined or
        distro_procs is undefined

- name: Check if getfattr installed
  stat:
    path: /usr/bin/getfattr
  register: getfattr

- name: Fail if getfattr not installed
  fail:
    msg: "The getfattr utility is not installed"
  when: getfattr.stat.exists == False

  # Rather than use the more complicated 'with_subelements' approach, it is
  # possible to just use a list of key,value pairs and iterate over them.
- name: Retrieve the common SELinux file labels
  command: getfattr -n security.selinux {{ item.key }} --absolute-names --only-values
  register: common_selinux_file_labels
  with_items: "{{ common_files }}"

  # The verification is slightly tricky.  The state of the previous play is
  # registered in a variable.  That variable has a key in it called 'results'
  # which contains the details of each time the 'command' was executed.  In
  # each of those details there is another key named 'item' which contains
  # the 'key' and 'value' from each item in 'common_files'.  We can compare
  # the 'value' to the stdout and see if the label was correct.
  #
  # This approach can be used for all other inspections of file labels or
  # process labels.
- name: Verify common SELinux file labels are correct
  fail:
    msg: "The file {{ item.item.key }} had an incorrect label of {{ item.stdout }} (expected {{ item.item.value }})"
  when: item.item.value not in item.stdout
  with_items: "{{ common_selinux_file_labels.results }}"

- name: Retrieve the distribution specific SELinux file labels
  command: getfattr -n security.selinux {{ item.key }} --absolute-names --only-values
  register: distro_selinux_file_labels
  with_items: "{{ distro_files }}"

- name: Verify distribution specific SELinux file labels are correct
  fail:
    msg: "The file {{ item.item.key }} had an incorrect label of {{ item.stdout }} (expected {{ item.item.value }})"
  when: item.item.value not in item.stdout
  with_items: "{{ distro_selinux_file_labels.results }}"

- name: Run 'rpm-ostree status' to start daemon
  command: rpm-ostree status

- name: Retrieve common SELinux process labels
  shell: ps --no-headers -o label -q $(systemctl show -p MainPID {{ item.key|quote }} | sed -e s,MainPID=,,)
  register: common_selinux_proc_labels
  with_items: "{{ common_procs }}"

- name: Verify common SELinux process labels are correct
  fail:
    msg: "The process {{ item.item.key }} had an incorrect label of {{ item.stdout }} (expected {{ item.item.value }})"
  when: item.item.value not in item.stdout
  with_items: "{{ common_selinux_proc_labels.results }}"

- name: Retrieve distribution specific SELinux process labels
  shell: ps --no-headers -o label -q $(systemctl show -p MainPID {{ item.key|quote }} | sed -e s,MainPID=,,)
  register: distro_selinux_proc_labels
  with_items: "{{ distro_procs }}"

- name: Verify distribution specific SELinux process labels are correct
  fail:
    msg: "The process {{ item.item.key }} had an incorrect label of {{ item.stdout }} (expected {{ item.item.value }})"
  when: item.item.value not in item.stdout
  with_items: "{{ distro_selinux_proc_labels.results }}"

- name: Look for files/dirs with 'default_t' label
  command: find {{ item }} -context '*:default_t:*'
  register: find_default_t
  with_items: "{{ mountpoints }}"

- name: Fail if a file/dir is found with 'default_t' label
  fail:
    msg: "The file {{ item.item }} had an SELinux label of 'default_t'"
  when: "{{ item.stdout | length }} != 0"
  with_items: "{{ find_default_t.results }}"

- name: Look for files/dir with 'unlabeled_t' label
  command: find {{ item }} -context '*:unlabeled_t:*'
  register: find_file_t
  with_items: "{{ mountpoints }}"

- name: Fail if a file is found with the 'unlabeled_t' label
  fail:
    msg: "The file {{ item.item }} had an SELinux label of 'unlabeled_t'"
  when: "{{ item.stdout | length }} != 0"
  with_items: "{{ find_file_t.results }}"
