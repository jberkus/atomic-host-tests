---
# vim: set ft=ansible:
#
#  This role sets facts for the current booted deployment
#
#  Optionally, you can archive the values to an YAML file that will drop into
#  the current playbook directory.
#
- name: Set archive value
  set_fact:
    bdsf_archive: "{{ archive | default('false') }}"
    bdsf_ansible_host: "{{ ansible_host }}"

# This role provides the following variables:
#  - ros: result of 'rpm-ostree status --json'
#  - ros_json: ros.stdout piped through the from_json filter
#  - ros_num_deployments:  number of deployments on host
#  - ros_booted: JSON object of the booted deployment
#  - ros_not_booted: JSON object of the not booted deployment
- name: Get rpm-ostree status output
  include_role:
    name: rpm_ostree_status

- name: Save refspec and checksum
  set_fact:
    bdsf_saved_checksum: "{{ ros_booted['checksum'] }}"
    # If the host is on a local branch, we have to skip splitting the 'origin'
    # because there is no remote portion
    bdsf_saved_refspec: "{{ ros_booted['origin'].split(':')[1] if ':' in ros_booted['origin'] else ros_booted['origin'] }}"
    bdsf_saved_remote_name: "{{ ros_booted['origin'].split(':')[0] if ':' in ros_booted['origin'] else '' }}"

# If 'bdsf_archve' is true, we setup the following global variables in a YAML
# file:
#  - g_archive_checksum
#  - g_archive_refspec
#  - g_archive_remote_name
- block:
  - name: Remove existing archive file
    local_action:
      file path="{{ playbook_dir }}/{{ bdsf_ansible_host }}_bdsf_archive.yml" state=absent
    become: false

  - name: Archive refspec and checksum
    local_action:
      template src=bdsf_archive.j2 dest="{{ playbook_dir }}/{{ bdsf_ansible_host }}_bdsf_archive.yml"
    become: false
  when: bdsf_archive
