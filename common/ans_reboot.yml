---
# vim: set ft=ansible:
# There is no clean way to restart hosts in ansible. The general issue is that
# the shutdown command may close sshd before ansible has time to "return" from
# the task, even with async & poll. This is due to the fact that asynchronous
# tasks still require a small synchronous bootstrapping script which takes 1 sec
# to complete, during which it is vulnerable to erroring out if sshd dies.
#       To mitigate this, we prefix a sleep command before the shutdown so
# ansible has time to move on. For more info on this issue, see:
# https://github.com/ansible/ansible/issues/10616
#
# The Ansible docs now recommend this combination of tasks to handle reboots
# https://support.ansible.com/hc/en-us/articles/201958037-Reboot-a-server-and-wait-for-it-to-come-back

# remember the real ansible_host for following local actions
# (otherwise ansible will target the localhost)
- set_fact:
    real_ansible_host: "{{ ansible_host }}"

- name: restart hosts
  shell: sleep 3 && shutdown -r now
  async: 1
  poll: 0
  ignore_errors: true
  when: (not skip_shutdown is defined) or (not skip_shutdown)

# NB: The following tasks use local actions, so we need to explicitly ensure
# that they don't use sudo, which may require a password, and is not necessary
# anyway.

- name: wait for hosts to go down
  local_action:
    wait_for host={{ real_ansible_host }}
    port=22 state=absent delay=1 timeout=120
  become: false

- name: wait for hosts to come back up
  local_action:
    wait_for host={{ real_ansible_host }}
    port=22 state=started delay=30 timeout=120
  become: false

# provide an empty iterator when a list is not provided
# http://docs.ansible.com/ansible/playbooks_conditionals.html#loops-and-conditionals
- name: check services have started
  service:
    name: "{{ item }}"
    state: started
  with_items: "{{ wait_for_services|default([]) }}"
