---
# vim: set ft=ansible
#
- name: Atomic CLI Test Suite
  hosts: all
  become: true

  vars_files:
    - "vars/{{ ansible_distribution|lower }}.yml"

  vars:
    tests: []

  tasks:
    - name: Set logging
      set_fact:
        log_results: true
        result_file: "{{ playbook_dir }}/atomic-result.log"
      tags: setup

    - include_tasks: 'setup.yml'
      tags: setup


    # TEST
    # Pull, install, run, uninstall, delete by fully qualified name
    - block:
        - include_tasks: 'fully_qualified_name.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Pull, install, run, uninstall, delete by fqn', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Pull, install, run, uninstall, delete by fqn', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: fully_qualified_name


    # TEST
    # Pull, install, run, uninstall, delete by short name
    - block:
        - include_tasks: 'short_name.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Pull, install, run, uninstall, delete by short name', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Pull, install, run, uninstall, delete by short name', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: short_name


    # TEST
    # Pull, install, run, uninstall, delete by fully qualified container name
    - block:
        - include_tasks: 'fully_qualified_container_name.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Pull, install, run, uninstall, delete by fully qualified container name ', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Pull, install, run, uninstall, delete by fully qualified container name ', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: fq_name_name


    # TEST
    # Pull with tags
    - block:
        - include_tasks: 'pull_tags.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Pull with tags', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Pull with tags', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: pull_tags


    # TEST
    # Pull with digest
    - block:
        - include_tasks: 'pull_digest.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Pull with digest', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Pull with digest', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: pull_digest


    # TEST
    # Pull with storage
    - block:
        - include_tasks: 'pull_storage.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Pull with storage', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Pull with storage', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: pull_storage


    # TEST
    # Images update
    - block:
        - include_tasks: 'images_update.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Images update', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Images update', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: images_update


    # CLEANUP
    - block:
        - include_tasks: 'cleanup.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name': 'Cleanup', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Cleanup', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      always:
        # WRITE RESULTS TO FILE
        - name: Remove existing log files
          local_action: file path={{ result_file }} state=absent
          become: false

        - name: Save result to file
          when: log_results
          local_action: copy content={{ tests | to_nice_yaml(indent=2) }} dest={{ result_file }}
          become: false
      tags: cleanup

    # Handled exceptions show up as failures in Ansible but the playbook
    # itself does not return 0, so explicitly fail the test by checking
    # the test results
    - name: Explicitly fail based on test results
      when: item['result']|lower == "failed"
      fail:
        msg: "Failure found in test"
      with_items: "{{ tests }}"
