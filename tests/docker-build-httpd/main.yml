---
# vim: set ft=ansible:
#
# !!!NOTE!!! This playbook was tested using Ansible 2.2; any other versions
# are not supported.
#
# This playbook aims to verify that the changes to the Atomic Host platform
# do not disrupt the ability for users to build/run containers built on top
# of various base images.  The base images from Docker Hub were selected
# based on 'popularity' (aka number of pulls).
#
# Each base image is used to build an httpd container, which is then run,
# and the content returned by the container is verified to be correct.
# Afterwards, the container and build image are removed from the system.
#
# In order to use less 'hacks', the playbook is actually multiple playbooks
# that are divided into setup, tests, and teardown.  As such, this playbook
# is meant to be run in its entirety and not separately.
#
- name: Docker build httpd - setup
  hosts: all
  become: yes

  tags:
    - setup

  vars_files:
    - vars.yml

  pre_tasks:
    - name: Fail if variables are not defined
      fail:
        msg: "Required variables are not defined.  Please check tests/docker-build-httpd/vars.yml."
      when: base_images is undefined or image_names is undefined

    - name: Fail if RHEL variables are not defined
      fail:
        msg: "Required RHEL variables are not defined.  Please check tests/docker-build-httpd/vars.yml"
      when: (rhel_base_images is undefined or rhel_image_names is undefined) and
            ansible_distribution == "RedHat"

  roles:
    # This playbook requires Ansible 2.2 and an Atomic Host
    - role: ansible_version_check
      avc_major: "2"
      avc_minor: "2"
      tags:
        - ansible_version_check

    - role: redhat_subscription
      when: ansible_distribution == "RedHat"
      tags:
        - redhat_subscription

  post_tasks:
    - name: Create working directory
      command: mktemp -d
      register: mktemp

    - name: Set the working_dir fact
      set_fact:
        working_dir: "{{ mktemp.stdout }}"

    - name: Copy Dockerfiles
      synchronize:
        src: files/
        dest: "{{ working_dir }}/"
        recursive: yes

    - name: Pull all the upstream base images
      command: "docker pull {{ item }}"
      with_items: "{{ base_images }}"

    - name: Pull the Red Hat base images
      command: "docker pull {{ item }}"
      with_items: "{{ rhel_base_images }}"
      when: ansible_distribution == "RedHat"


- name: Docker build httpd - test
  hosts: all
  become: yes

  tags:
    - tests

  vars_files:
    - vars.yml

  pre_tasks:
    - name: Fail if variables are not defined
      fail:
        msg: "Required variables are not defined.  Please check tests/docker-build-httpd/vars.yml."
      when: base_images is undefined or image_names is undefined

    - name: Fail if RHEL variables are not defined
      fail:
        msg: "Required RHEL variables are not defined.  Please check tests/docker-build-httpd/vars.yml"
      when: (rhel_base_images is undefined or rhel_image_names is undefined) and
            ansible_distribution == "RedHat"
  tasks:
      # I would have used a 'block' of 'roles' here, but that is not
      # compatible with the 'with_items' loop control, so I stuck all
      # the tasks into a single role file and used an 'include:'
      # statement on that file.
    - include: tasks/build_run_remove.yml base_dir={{ working_dir }} image_name={{ item }}
      with_items: "{{ image_names }}"

    - include: tasks/build_run_remove.yml base_dir={{ working_dir }} image_name={{ item }}
      with_items: "{{ rhel_image_names }}"
      when: ansible_distribution == "RedHat"


- name: Docker build httpd - teardown
  hosts: all
  become: yes

  tags:
    - teardown

  roles:
    - role: docker_remove_all
      tags:
        - docker_remove_all

    - role: redhat_unsubscribe
      when: ansible_distribution == "RedHat"
      tags:
        - redhat_unsubscribe
