---
# vim: set ft=ansible:
#
#   This is a general test suite for rpm-ostree that exercises several of the
# rpm-ostree subcommands.  These tests assume the atomic host is provisioned
# with the latest version.  These tests are meant to be run in succession.
#
- name: rpm-ostree - Setup
  hosts: all
  become: true

  vars_files:
    - vars.yml

  vars:
    tests: []

  tasks:
    - name: Set logging
      set_fact:
        log_results: true
        result_file: "{{ playbook_dir }}/rpm-ostree-result.log"
      tags:
        - setup

    - include_tasks: 'setup.yml'
      tags:
        - setup

    # TEST
    # Verify deploying via version string
    - block:
        - include_tasks: 'deploy_version.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Deploy via Version String', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Deploy via Version String', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - deploy_version

    # TEST
    # Verify deploying via commit ID
    - block:
        - include_tasks: 'deploy_commit.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Deploy via Commit ID', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Deploy via Commit ID', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - deploy_commit

    # TEST
    # Verify cleanup of pending deployments
    - block:
        - include_tasks: 'cleanup_pending.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Cleanup Pending Deployment', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Cleanup Pending Deployment', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - cleanup_pending

    # TEST
    # Verify upgrade + rebase
    - block:
        - include_tasks: 'upgrade_rebase.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Upgrade + Rebase', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Upgrade + Rebase', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - upgrade_rebase

    # TEST
    # Verify upgrade + rebase + install + uninstall
    - block:
        - include_tasks: 'upgrade_rebase_install_uninstall.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Upgrade + Rebase + Install + Uninstall', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Upgrade + Rebase + Install + Uninstall', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - upgrade_rebase_install_uninstall

    # TEST
    # Verify livefs functionality
    - block:
        - include_tasks: 'livefs.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Verify Livefs Functionality', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Verify Livefs Functionality', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - livefs

    # TEST
    # Verify initramfs functionality
    - block:
        - include_tasks: 'initramfs.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Verify Initramfs Functionality', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Verify Initramfs Functionality', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - initramfs

    # TEST
    # Verify compose functionality
    - block:
        - include_tasks: 'compose.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Verify Compose Functionality', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Verify Compose Functionality', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - compose

    # TEST
    # Verify override replace + reset functionality
    - block:
        - include_tasks: 'override_replace_reset.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Verify Override Replace + Reset Functionality', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Verify Override Replace + Reset Functionality', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - override_replace_reset

    # TEST
    # Verify override Remove + reset functionality
    - block:
        - include_tasks: 'override_remove_reset.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Verify Override Remove + Reset Functionality', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Verify Override Remove + Reset Functionality', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - override_remove_reset

    # TEST
    # Negative testing
    - block:
        - include_tasks: 'negative.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Negative Testing', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Negative Testing', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - negative

    # CLEANUP
    - block:
        - include_tasks: 'cleanup.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name': 'Cleanup', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Cleanup', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      always:
        # WRITE RESULTS TO FILE
        - name: Remove existing log files
          local_action: file path={{ result_file }} state=absent
          become: false

        - name: Save result to file
          when: log_results
          local_action: copy content={{ tests | to_nice_yaml(indent=2) }} dest={{ result_file }}
          become: false
      tags: cleanup


    # Handled exceptions show up as failures in Ansible but the playbook
    # itself does not return 0, so explicitly fail the test by checking
    # the test results
    - name: Explicitly fail based on test results
      when: item['result']|lower == "failed"
      fail:
        msg: "Failure found in test"
      with_items: "{{ tests }}"
