---
# vim: set ft=ansible:
#
#   This is a general test suite for rpm-ostree that exercises several of the
# rpm-ostree subcommands.  These tests assume the atomic host is provisioned
# with the latest version.  These tests are meant to be run in succession.
#
- name: rpm-ostree - Setup
  hosts: all
  become: true

  tags:
    - setup

  vars_files:
    - vars.yml

  roles:
    # This playbook requires Ansible 2.2 and an Atomic Host
    - role: ansible_version_check
      avc_major: "2"
      avc_minor: "2"
      tags:
        - ansible_version_check

    # Subscribe if the system is RHEL
    - when: ansible_distribution == 'RedHat'
      role: redhat_subscription
      tags:
        - redhat_subscription

#####################################################################################
#
# rpm-ostree deploy version
#   - validates deploying by version string
#   - validates cleanup of rollback deployment
#
#####################################################################################

- name: rpm-ostree - deploy by version
  hosts: all
  become: true

  tags:
    - deploy_version

  vars_files:
    - vars.yml

  tasks:
    - include_role:
        name: rpm_ostree_status

    # It's possible that the test could be run against a commit that is older
    # that what HEAD is on the remote.  So let's just get all the commit
    # metadata to be safe.
    - name: Pull all the commit data
      command: >
        ostree pull --commit-metadata-only --depth=-1 {{ ros_booted['origin'] }}
      register: osp
      retries: 5
      delay: 60
      until: osp|success

    # Use the parent of the deployed commit as HEAD-1, in case the remote
    # is updated during the test.
    - name: Get parent of deployed commit
      shell: >
        ostree show $(ostree rev-parse {{ ros_booted['checksum'] }}^)
        --print-metadata-key version | tr -d \'
      register: ostree_show

    # the rpm_ostree_status above sets the ros_booted variable used below
    - name: Set current version and refspec
      set_fact:
        head_version: "{{ ros_booted['version'] }}"
        hmo_version: "{{ ostree_show.stdout }}"
        refspec: "{{ ros_booted['origin'] }}"

    - name: Deploy HEAD-1
      command: rpm-ostree deploy {{ hmo_version }}
      register: ros_deploy
      retries: 5
      delay: 60
      until: ros_deploy|success

    # reboot
    - include_role:
        name: reboot

    # verify version in deployment 0
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        deployment: 0
        num_deployments: 2
        expected:
          booted: true
          version: "{{ hmo_version }}"

    # rollback to head
    - include_role:
        name: rpm_ostree_rollback

    # reboot
    - include_role:
        name: reboot

    - include_role:
        name: rpm_ostree_status_verify
      vars:
        deployment: 0
        num_deployments: 2
        expected:
          version: "{{ head_version }}"

    - name: Cleanup deployments
      command: rpm-ostree cleanup -r

    # verify cleanup
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        deployment: 0
        num_deployments: 1
        expected:
          version: "{{ head_version }}"


#####################################################################################
#
# rpm-ostree deploy commit id
#   - validates deploying by commit id
#   - validates cleanup of rollback deployment
#
#####################################################################################

- name: rpm-ostree - deploy by commit
  hosts: all
  become: true

  tags:
    - deploy_commit

  vars_files:
    - vars.yml

  tasks:
    - include_role:
        name: rpm_ostree_status

    # Get the parent of the deployed commit, which we will use as HEAD-1
    # in case the remote gets updated while testing
    - name: Get parent of deployed commit
      command: ostree rev-parse {{ ros_booted['checksum'] }}^
      register: orp

    # the rpm_ostree_status above sets the ros_booted variable used below
    - name: Set current commit version and refspec
      set_fact:
        head_csum: "{{ ros_booted['checksum'] }}"
        hmo_csum: "{{ orp.stdout }}"
        refspec: "{{ ros_booted['origin'] }}"

    - name: Deploy HEAD-1
      command: rpm-ostree deploy {{ hmo_csum }}
      register: ros_deploy
      retries: 5
      delay: 60
      until: ros_deploy|success

    # reboot
    - include_role:
        name: reboot

    # verify booted checksum
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        num_deployments: 2
        deployment: 0
        expected:
          booted: true
          checksum: "{{ hmo_csum }}"

    - name: Rollback to HEAD
      include_role:
        name: rpm_ostree_rollback

    # reboot
    - include_role:
        name: reboot

    # verify HEAD checksum is booted
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        num_deployments: 2
        deployment: 0
        expected:
          booted: true
          checksum: "{{ head_csum }}"

    - name: Cleanup rollback
      command: rpm-ostree cleanup -r

    # verify rollback cleanup
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        num_deployments: 1
        deployment: 0
        expected:
          checksum: "{{ head_csum }}"

#####################################################################################
#
# rpm-ostree cleanup test
#   - validates cleanup of pending deployments
#
#####################################################################################

- name: rpm-ostree - cleanup
  hosts: all
  become: true

  tags:
    - cleanup_pending

  vars_files:
    - vars.yml

  tasks:
    - include_role:
        name: rpm_ostree_status

    # Get the parent of the deployed commit, which we will use as HEAD-1
    # in case the remote gets updated while testing
    - name: Get parent of deployed commit
      command: ostree rev-parse {{ ros_booted['checksum'] }}^
      register: orp

    # the rpm_ostree_status above sets the ros_booted variable used below
    - name: Set current commit version and refspec
      set_fact:
        head_csum: "{{ ros_booted['checksum'] }}"
        hmo_csum: "{{ orp.stdout }}"
        refspec: "{{ ros_booted['origin'] }}"

    - name: Deploy HEAD-1 checksum
      command: rpm-ostree deploy {{ hmo_csum }}
      register: ros_deploy
      retries: 5
      delay: 60
      until: ros_deploy|success

    # verify pending deployment info
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        num_deployments: 2
        deployment: 0
        expected:
          booted: false
          checksum: "{{ hmo_csum }}"

    # verify current deployment info
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        num_deployments: 2
        deployment: 1
        expected:
          booted: true
          checksum: "{{ head_csum }}"

    - name: Delete pending deployment
      command: rpm-ostree cleanup -p

    # verify origin deployment is still there and not deleted
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        num_deployments: 1
        deployment: 0
        expected:
          booted: true
          checksum: "{{ head_csum }}"

#####################################################################################
#
# rpm-ostree upgrade + rebase
#   - simulates an upgrade and rebases to origin
#
#####################################################################################

- name: rpm-ostree - upgrade and rebase
  hosts: all
  become: true

  tags:
    - upgrade_rebase

  vars_files:
    - vars.yml

  tasks:
    - include_role:
        name: rpm_ostree_status

    # the rpm_ostree_status above sets the ros_booted variable used below
    - name: Set current commit version and refspec
      set_fact:
        head_csum: "{{ ros_booted['checksum'] }}"
        refspec: "{{ ros_booted['origin'] }}"

    - name: Get origin dir
      command: ostree admin --print-current-dir
      register: current_dir

    - name: Create local branch
      command: ostree refs --create local-branch {{ head_csum }}

    # update refspec in origin file so rpm-ostree upgrade uses local-branch
    - name: Update origin file
      command: >
        sed -i 's/^\(.*refspec\)=.*$/\1=local-branch/g'
        {{ current_dir.stdout }}.origin

    - name: Commit new local branch
      command: >
        ostree commit -b local-branch --tree=ref=local-branch
        --add-metadata-string version=test
      register: new_commit

    # TODO: revert this conditional once F26 picks up rpm-ostree 2017.9
    - name: rpm-ostree reload
      when:
        - ansible_distribution != 'Fedora'
        - ansible_distribution_major_version != '26'
      command: rpm-ostree reload

    - name: restart rpm-ostreed
      when:
        - ansible_distribution == 'Fedora'
        - ansible_distribution_major_version == '26'
      service:
        name: rpm-ostreed
        state: restarted

    # rpm-ostree upgrade
    - include_role:
        name: rpm_ostree_upgrade

    # reboot
    - include_role:
        name: reboot

    # verify upgrade info
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        num_deployments: 2
        deployment: 0
        expected:
          checksum: "{{ new_commit.stdout }}"
          version: "test"
          origin: "local-branch"

    - name: Rebase back to original deployment
      command: rpm-ostree rebase {{ refspec }} {{ head_csum }}
      register: ros_rebase
      retries: 5
      delay: 60
      until: ros_rebase|success

    # reboot
    - include_role:
        name: reboot

    # verify rebase back to original refspec
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        num_deployments: 2
        deployment: 0
        expected:
          checksum: "{{ head_csum }}"

    - name: Cleanup
      command: rpm-ostree cleanup -rpmb

    # verify cleanup
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        num_deployments: 1
        deployment: 0
        expected:
          checksum: "{{ head_csum }}"


#####################################################################################
#
# rpm-ostree upgrade + rebase + install + uninstall
#   - simulates an upgrade and rebases to origin with install/uninstall
#
#####################################################################################

- name: rpm-ostree - upgrade and rebase + install and uninstall
  hosts: all
  become: true

  tags:
    - upgrade_rebase_install_uninstall

  vars_files:
    - vars.yml

  tasks:
    - include_role:
        name: rpm_ostree_status

    # Get the parent of the deployed commit, which we will use as HEAD-1
    # in case the remote gets updated while testing
    - name: Get parent of deployed commit
      command: ostree rev-parse {{ ros_booted['checksum'] }}^
      register: orp

    # the rpm_ostree_status above sets the ros_booted variable used below
    - name: Set current commit version and refspec
      set_fact:
        head_csum: "{{ ros_booted['checksum'] }}"
        hmo_csum: "{{ orp.stdout }}"
        refspec: "{{ ros_booted['origin'] }}"

    - name: Set origin file
      command: ostree admin --print-current-dir
      register: current_dir

    - name: Create local branch
      command: ostree refs --create local-branch {{ head_csum }}

    # update refspec in origin file so rpm-ostree upgrade uses local-branch
    - name: Update origin file
      command: >
        sed -i 's/^\(.*refspec\)=.*$/\1=local-branch/g'
        {{ current_dir.stdout }}.origin

    - name: Commit new local branch
      command: >
        ostree commit -b local-branch --tree=ref=local-branch
        --add-metadata-string version=test
      register: new_commit

    # TODO: revert this conditional once F26 picks up rpm-ostree 2017.9
    - name: rpm-ostree reload
      when:
        - ansible_distribution != 'Fedora'
        - ansible_distribution_major_version != '26'
      command: rpm-ostree reload

    - name: restart rpm-ostreed
      when:
        - ansible_distribution == 'Fedora'
        - ansible_distribution_major_version == '26'
      service:
        name: rpm-ostreed
        state: restarted

    - name: Upgrade
      command: rpm-ostree upgrade --install {{ g_pkg }}
      register: ros_upgrade
      retries: 5
      delay: 60
      until: ros_upgrade|success

    # reboot
    - include_role:
        name: reboot

    # verify upgrade info
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        num_deployments: 2
        deployment: 0
        expected:
          booted: true
          base-checksum: "{{ new_commit.stdout }}"

    # verify installation of {{ g_pkg }}
    - include_role:
        name: rpm_ostree_install_verify
      vars:
        roiv_package_name: "{{ g_pkg }}"
        roiv_binary_name: "{{ g_pkg }}"

    - name: Rebase back to original deployment
      command: rpm-ostree rebase {{ refspec }} {{ head_csum }}

    # reboot
    - include_role:
        name: reboot

    # verify rebase info
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        num_deployments: 2
        deployment: 0
        expected:
          booted: true
          base-checksum: "{{ head_csum }}"

    # verify package is still layered
    - include_role:
        name: rpm_ostree_install_verify
      vars:
        roiv_package_name: "{{ g_pkg }}"
        roiv_binary_name: "{{ g_pkg }}"

    # refresh rpm-ostree status variables
    - include_role:
        name: rpm_ostree_status

    - name: Deploy HEAD-1
      command: rpm-ostree deploy {{ hmo_csum }} --uninstall {{ g_pkg }}
      register: ros_deploy
      retries: 5
      delay: 60
      until: ros_deploy|success

    # reboot
    - include_role:
        name: reboot

    # verify package is no longer installed
    - include_role:
        name: rpm_ostree_uninstall_verify
      vars:
        rouv_package_name: "{{ g_pkg }}"
        rouv_binary_name: "{{ g_pkg }}"

    # verify deploy with uninstallation info
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        num_deployments: 2
        deployment: 0
        expected:
          booted: true
          checksum: "{{ hmo_csum }}"

    # Deploy back to original commit
    - name: Deploy original commit
      command: rpm-ostree deploy {{ head_csum }}
      register: rosd_head
      retries: 5
      delay: 60
      until: rosd_head|success

    # reboot
    - include_role:
        name: reboot

    # verify package is still not installed
    - include_role:
        name: rpm_ostree_uninstall_verify
      vars:
        rouv_package_name: "{{ g_pkg }}"
        rouv_binary_name: "{{ g_pkg }}"

    # verify upgrade info
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        num_deployments: 2
        deployment: 0
        expected:
          booted: true
          checksum: "{{ head_csum }}"

    - name: Cleanup
      command: rpm-ostree cleanup -rpmb

    # verify cleanup
    - include_role:
        name: rpm_ostree_status_verify
      vars:
        num_deployments: 1
        deployment: 0
        expected:
          checksum: "{{ head_csum }}"

#####################################################################################
#
# rpm-ostree livefs
#   - simple test for test livefs
#
#####################################################################################
- name: rpm-ostree livefs
  hosts: all
  become: true

  tags:
    - livefs

  pre_tasks:
    - name: Set pkg name
      set_fact:
        pkg_name: "wget"

  roles:
    - role: rpm_ostree_cleanup_all

    - role: rpm_ostree_install
      roi_packages: "{{ pkg_name }}"
      roi_reboot: false

    - role: rpm_ostree_livefs

    - role: rpm_ostree_install_verify
      roiv_package_name: "{{ pkg_name }}"
      roiv_status_check: false

    # rol_base_commit and rol_livefs_commit come from the rpm_ostree_livefs role
    # deployment information
    - role: rpm_ostree_status_verify
      num_deployments: 3
      deployment: 1
      expected:
        booted: true
        checksum: "{{ rol_base_commit }}"
        live-replaced: "{{ rol_livefs_commit }}"

    - role: rpm_ostree_status_verify
      deployment: 0
      expected:
        booted: false
        checksum: "{{ rol_livefs_commit }}"
        packages:
          - "{{ pkg_name }}"

    - role: rpm_ostree_status_verify
      deployment: 2
      expected:
        booted: false
        checksum: "{{ rol_base_commit }}"
        packages: []

    # Reboot and check that the deployment is now a typical package layered
    # deployment
    - role: reboot

    - role: rpm_ostree_install_verify
      roiv_package_name: "{{ pkg_name }}"
      roiv_status_check: false

    - role: rpm_ostree_status_verify
      deployment: 0
      expected:
        booted: true
        base-checksum: "{{ rol_base_commit }}"
        checksum: "{{ rol_livefs_commit }}"
        packages:
          - "{{ pkg_name }}"

    - role: rpm_ostree_status_verify
      deployment: 1
      expected:
        booted: false
        checksum: "{{ rol_base_commit }}"
        live-replaced: "{{ rol_livefs_commit }}"

    - role: rpm_ostree_status_verify
      deployment: 2
      expected:
        booted: false
        checksum: "{{ rol_base_commit }}"
        packages: []

    # Rollback twice to get to the original deployment
    - role: rpm_ostree_rollback

    - role: rpm_ostree_rollback

    # Reboot and verify that the system is back to the original deployment
    # without livefs or layered packages
    - role: reboot

    - role: rpm_ostree_uninstall_verify
      rouv_package_name: "{{ pkg_name }}"
      rouv_status_check: false

    - role: rpm_ostree_status_verify
      deployment: 0
      expected:
        booted: true
        checksum: "{{ rol_base_commit }}"
        packages: []

    - role: rpm_ostree_status_verify
      deployment: 1
      expected:
        booted: false
        checksum: "{{ rol_base_commit }}"
        live-replaced: "{{ rol_livefs_commit }}"

    - role: rpm_ostree_status_verify
      deployment: 2
      expected:
        booted: false
        base-checksum: "{{ rol_base_commit }}"
        checksum: "{{ rol_livefs_commit }}"
        packages:
          - "{{ pkg_name }}"

    - role: rpm_ostree_cleanup_all

#####################################################################################
#
# rpm-ostree initramfs
#   - test client side initramfs
#
#####################################################################################

- name: rpm-ostree - client side initramfs
  hosts: all
  become: true

  tags:
    - initramfs

  vars_files:
    - vars.yml

  tasks:
    - name: Create initramfs file
      file:
        path: /etc/rpmostree-file
        state: touch

    - name: Modify initramfs file
      lineinfile:
        dest: /etc/rpmostree-file
        line: "rpm-ostree-test"

    - name: Enable initramfs
      command: >
        rpm-ostree initramfs --enable --arg="-I"
        --arg="/etc/rpmostree-file"

    - include_role:
        name: reboot

    - include_role:
        name: rpm_ostree_status_verify
      vars:
        num_deployments: 2
        deployment: 0
        expected:
          booted: true
          regenerate-initramfs: true

    - name: Fail if initramfs does not have two arguments
      when: ros_booted['initramfs-args']|length != 2
      fail:
        msg: |
          Expected: 2 arguments
          Actual: {{ ros_booted['initramfs-args'] | length }}

    - name: Fail if first initramfs argument is not set
      when: "'-I' not in ros_booted['initramfs-args'][0]"
      fail:
        msg: |
          Expected: -I in initramfs args
          Actual:  {{ ros_booted['initramfs-args'][0] }}

    - name: Fail if second initramfs argument is not set
      when: "'/etc/rpmostree-file' not in ros_booted['initramfs-args'][1]"
      fail:
        msg: |
          Expected: /etc/rpmostree-file in rpm-ostree initramfs-args
          Actual: {{ ros_booted['initramfs-args'][1] }}

    - name: set osname
      set_fact:
        osname: "{{ ros_booted['osname'] }}"

    - name: Get bootloader entry
      shell: >
        grep ^initrd /boot/loader/entries/ostree-{{ osname }}-0.conf |
        sed -e 's,initrd ,/boot/,'
      register: initrd

    - name: Check initramfs file
      command: test -n {{ initrd.stdout }}

    - name: Get contents of initrd
      command: lsinitrd {{ initrd.stdout }} -f /etc/rpmostree-file
      register: lsinitrd

    - name: Fail if contents of initrd is incorrect
      when: "'rpm-ostree-test' not in lsinitrd.stdout"
      fail:
        msg: |
          Expected: lsinitrd of /etc/rpm-ostree-file contains rpm-ostree-test
          Actual: {{ lsinitrd.stdout }}

    - name: Disable initramfs
      command: rpm-ostree initramfs --disable

    - include_role:
        name: reboot

    - name: Get bootloader entry
      shell: >
        grep ^initrd /boot/loader/entries/ostree-{{ osname }}-0.conf |
        sed -e 's,initrd ,/boot/,'
      register: initrd_disabled

    - name: Check initramfs file
      command: test -n {{ initrd_disabled.stdout }}

    - name: Get contents of initrd
      command: lsinitrd {{ initrd_disabled.stdout }} -f /etc/rpmostree-file
      register: lsinitrd_disabled

    - name: Fail if contents of initramfs is incorrect
      when: "'rpm-ostree-test' in lsinitrd_disabled.stdout"
      fail:
        msg: |
          Expected: initramfs of /etc/rpmostree-file contains rpm-ostree-test
          Actual: {{ lsinitrd_disabled.stdout }}

    - name: Clean up deployments
      command: rpm-ostree cleanup -rpmb


#####################################################################################
#
# rpm-ostree compose
#   - test creating custom composes
#
#####################################################################################

- name: rpm-ostree compose
  hosts: all
  become: true

  tags:
    - compose

  vars_files:
    - vars.yml

  tasks:
    # Only run this test on Fedora and CentOS Atomic Host Continuous
    # RHEL Atomic Host and CentOS do not have compose abilities enabled
    - when: >
        ansible_distribution == "Fedora" or
        ansible_distribution == "CentOSDev"
      block:
        - name: Set base dir
          set_fact:
            base_dir: '/var/srv'

        - name: Set common facts
          set_fact:
            compose_pkg: 'wget'
            cache_dir: '{{ base_dir }}/cache'
            repo_dir: '{{ base_dir }}/repo'

        - name: Set Fedora facts
          when: ansible_distribution == "Fedora"
          set_fact:
            repo_url: 'https://pagure.io/fedora-atomic.git'
            repo_name: 'fedora-atomic'
            json_file: 'fedora-atomic-host-base.json'

        - name: Set CentOS Continuous facts
          when: ansible_distribution == "CentOSDev"
          set_fact:
            repo_url: 'https://github.com/CentOS/sig-atomic-buildscripts.git'
            repo_name: 'centos'
            base_json: 'centos-atomic-host.json'
            json_file: 'centos-atomic-host-continuous.json'

        # CentOS Atomic Host runs out of space in the root partition when
        # creating a tree and rebasing to it so the root partition needs
        # to be increased
        - name: Resize partition for CentOS
          when: ansible_distribution == "CentOSDev"
          include_role:
            name: resize_lv
          vars:
            rl_lvname: 'root'
            rl_lvsize: '6'

        - name: Clone fedora 27 repo
          when: ansible_distribution == "Fedora"
          command: >
            docker run -v {{ base_dir }}:{{ base_dir }}:z
              docker.io/miabbott/aht-tools /bin/bash -c
              "git clone {{ repo_url }} {{ base_dir }}/{{ repo_name }};
               cd {{ base_dir }}/{{ repo_name }}; git checkout f27"

        - name: Clone sig-atomic-buildscripts repo
          when: ansible_distribution == "CentOSDev"
          command: >
            docker run -v {{ base_dir }}:{{ base_dir }}:z
              docker.io/miabbott/aht-tools /bin/bash -c
              "git clone {{ repo_url }} {{ base_dir }}/{{ repo_name }};
               cd {{ base_dir }}/{{ repo_name }};"

        - name: Create repo directory
          file:
            path: '{{ repo_dir }}'
            state: directory
            mode: 0755

        - name: Initialize repo directory
          command: ostree --repo=repo init --mode=archive-z2
          args:
            chdir: '{{ base_dir }}'

        - name: Create cache directory
          file:
            path: '{{ cache_dir }}'
            state: directory
            mode: 0755

        # base_json is required because the CAHC json file uses the centos
        # atomic host base json which contains the package list that needs
        # to be modified
        - name: Modify base package json for CAHC
          when: base_json is defined
          lineinfile:
            dest: '{{ base_dir }}/{{ repo_name }}/{{ base_json }}'
            state: present
            insertafter: '"docker",$'
            line: '         "{{ compose_pkg }}",'

        - name: Modify base package json for Fedora
          when: base_json is undefined
          lineinfile:
            dest: '{{ base_dir }}/{{ repo_name }}/{{ json_file }}'
            state: present
            insertafter: '"docker",$'
            line: '         "{{ compose_pkg }}",'

        - name: Compose new tree
          command: >
            rpm-ostree compose tree
              --cachedir={{ cache_dir }}
              --repo={{ repo_dir }}
              {{ base_dir }}/{{ repo_name }}/{{ json_file }}
          register: rct_output

        - name: Set refspec and commit id
          set_fact:
            rct_refspec: "{{ rct_output.stdout | regex_search(regexp, '\\1') }}"
            rct_commit_id: "{{ rct_output.stdout | regex_search(regexp, '\\2') }}"
          vars:
            regexp: '(.*)\s=>\s(.*)'

        # Fire the http server and forget about it using the async option
        # This http server will die when the system is rebooted after rebase
        - name: Start http server and keep it running
          command: python -m SimpleHTTPServer 80
          args:
            chdir: '{{ base_dir }}'
          async: 1000
          poll: 0
          tags:
            - start

        - include_role:
            name: rpm_ostree_rebase
          vars:
            refspec: '{{ rct_refspec[0] }}'
            remote_name: local
            remote_url: http://localhost:80/repo

        - include_role:
            name: reboot

        - include_role:
            name: rpm_ostree_status

        - name: Fail if booted commit is incorrect
          when:
            - rct_commit_id[0] != booted_checksum
          fail:
            msg: |
              Expected: booted commit is {{ rct_commit_id[0] }}
              Actual: booted commit is {{ booted_checksum }}
          vars:
            booted_checksum: '{{ ros_booted["checksum"] }}'

        # use the rpm_ostree_install_verify to ensure compose_pkg  was part
        # of the compose but do not check that it is layered
        - include_role:
            name: rpm_ostree_install_verify
          vars:
            roiv_package_name: '{{ compose_pkg }}'
            roiv_binary_name: '{{ compose_pkg }}'
            roiv_status_check: false

        - include_role:
            name: rpm_ostree_rollback

        - include_role:
            name: reboot

        - name: Clean up deployments
          command: rpm-ostree cleanup -rpmb

