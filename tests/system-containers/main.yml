---
# vim: set ft=ansible:
#
# !!!NOTE!!! This playbook was tested using Ansible 2.2; it is recommended
# that the same version is used.
#
# Test Cases
#   Core Functionality
#     - Verify system containers can be installed through atomic command
#     - Verify system containers can be uninstalled through the atomic command
#     - Verify user can specify name for system containers
#     - Verify system containers can be listed
#     - Verify environment variables can be pass to the container
#     - Verify update/rollback of system containers
#     - Verify commands can be run in the system container
#     - Verify specification of rootfs for system containers.
#     - Verify setting RUN_DIRECTORY and STATE_DIRECTORY
#     - Verify system containers are started on reboot
#     - Verify system containers persist through reboot
#
#   Flannel & Etcd Tests
#     - Verify installation of flannel and etcd containers
#
#   Negative Testing
#     - Verify uninstalling a system container that does not exist fails
#     - Verify installing a system container that does not exist fails
#     - Verify DESTDIR, NAME, EXEC_START, EXEC_STOP, HOST_UID, and HOST_GID
#         cannot be set
#
#   Not Covered
#     Upgrade Tests
#       - Verify the system container persists through ostree upgrade
#       - Verify the system container persists through ostree rollback
#
- name: System Containers - Test Suite
  hosts: all
  become: true

  vars_files:
    - vars.yml

  vars:
    tests: []

  tasks:
    - name: Set logging
      set_fact:
        log_results: true
        result_file: "{{ playbook_dir }}/system-containers-result.log"
      tags:
        - setup

    - include_tasks: 'setup.yml'
      tags:
        - setup

    # TEST
    # Verify that system containers can be installed/uninstalled
    - block:
        - include_tasks: 'install_uninstall.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Install/Uninstall System Containers', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Install/Uninstall System Containers', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - install_uninstall

    # TEST
    # Verify that system container is active/running after reboot
    - block:
        - include_tasks: 'reboot.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Running After Reboot', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Running After Reboot', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - reboot

    # TEST
    # Verify environment variables can be pass to the container
    - block:
        - include_tasks: 'pass_variables.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Pass Variables to System Container', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Pass Variables to System Container', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - pass_variables

    # TEST
    # Verify update/rollback of system containers
    - block:
        - include_tasks: 'update_rollback.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Verify Update/Rollback of System Container', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Verify Update/Rollback of System Container', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - update_rollback

    # TEST
    # Verify specification of rootfs for system containers.
    - block:
        - include_tasks: 'rootfs.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Verify Specification of rootfs for System Container', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Verify Specification of rootfs for System Container', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - rootfs

    # TEST
    # Verify install of flannel/etcd system container
    - block:
        - include_tasks: 'flannel_etcd.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Install flannel/etcd System Containers', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Install flannel/etcd System Containers', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - flannel_etcd

    # TEST
    # Verify setting RUN_DIRECTORY and STATE_DIRECTORY
    - block:
        - include_tasks: 'flannel_etcd.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Configure RUN_DIRECTORY and STATE_DIRECTORY', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Configure RUN_DIRECTORY and STATE_DIRECTORY', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - run_state_dir

    # TEST
    # Verify uninstalling a system container that does not exist fails
    # Verify installing a system container that does not exist fails
    # Verify DESTDIR, NAME, EXEC_START, EXEC_STOP, HOST_UID, and HOST_GID
    # cannot be set
    - block:
        - include_tasks: 'negative.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Negative Testing', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Negative Testing', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags:
        - negative


    # Cleanup
    - block:
        - include_tasks: 'cleanup.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Cleanup', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Cleanup', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      always:
        # WRITE RESULTS TO FILE
        - name: Remove existing log files
          local_action: file path={{ result_file }} state=absent
          become: false

        - name: Save result to file
          when: log_results
          local_action: copy content={{ tests | to_nice_yaml(indent=2) }} dest={{ result_file }}
          become: false
      tags:
        - cleanup
