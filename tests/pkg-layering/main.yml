---
# set ft=ansible
#

- name: Package Layering - Test Suite
  hosts: all
  become: true

  vars_files:
    - vars.yml

  vars:
    tests: []

  tasks:
    - name: Set logging
      set_fact:
        log_results: true
        result_file: "{{ playbook_dir }}/pkg-layering-result.log"
      tags: setup

    - include_tasks: 'setup.yml'
      tags: setup

    # TEST
    # Verify installing and uninstalling a single package
    - block:
        - include_tasks: 'single_pkg_install_uninstall.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Single package install and uninstall', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Single package install and uninstall', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: single_pkg_install_uninstall

    # TEST
    # Verify installing and uninstalling multiple packages
    - block:
        - include_tasks: 'multi_pkg_install_uninstall.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Multiple package install and uninstall', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Multiple package install and uninstall', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: multi_pkg_install_uninstall

    # TEST
    # Verify installing using the reboot flag
    - block:
        - include_tasks: 'reboot_flag.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Reboot flag', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Reboot flag', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: reboot_flag

    # TEST
    # Verify installing with the dry run option
    - block:
        - include_tasks: 'dry_run.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Dry run', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Dry run', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: dry_run

    # TEST
    # Verify installing with dry run option does not install anything
    - block:
        - include_tasks: 'dry_run_interaction.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Dry run interaction', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Dry run interaction', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: dry_run_interaction

    # TEST
    # Verify installing a package from an alternate repo
    - block:
        - include_tasks: 'alternate_repo_install.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Alternate repo install', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Alternate repo install', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: alternate_repo_install

    # TEST
    # Verify installing with gpgcheck turned on and off
    - block:
        - include_tasks: 'gpg.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'GPG', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'GPG', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: gpg

    # TEST
    # Negative test - verify user cannot uninstall an invalid package
    - block:
        - include_tasks: 'uninstall_invalid_pkg.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Uninstall invalid package', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Uninstall invalid package', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: uninstall_invalid_pkg

    # TEST
    # Negative test - verify user cannot install an invalid package
    - block:
        - include_tasks: 'install_invalid_pkg.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Install invalid package', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Install invalid package', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: install_invalid_pkg

    # TEST
    # Negative test - verify user cannot install an existing package
    - block:
        - include_tasks: 'install_existing_pkg.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Install existing package', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Install existing package', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: install_existing_pkg

    # TEST
    # Verify installing a nonroot package
    - block:
        - include_tasks: 'install_nonroot_pkg.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Install nonroot package', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Install nonroot package', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: install_nonroot_pkg

    # TEST
    # Negative test - verify user cannot install a previously layered package
    - block:
        - include_tasks: 'install_previously_layered.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Install previously layered', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Install previously layered', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: install_previously_layered

    # TEST
    # Negative test - verify user cannot use package layering without sufficient permissions
    - block:
        - include_tasks: 'install_unprivileged.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name':'Install unprivileged', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Install unprivileged', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      tags: install_unprivileged

    # CLEANUP
    - block:
        - include_tasks: 'cleanup.yml'
        - set_fact:
            tests: "{{ tests + [ { 'name': 'Cleanup', 'result':'Passed', 'result_details': '' } ] }}"
      rescue:
        - set_fact:
            tests: "{{ tests + [ { 'name':'Cleanup', 'result':'Failed', 'result_details': ansible_failed_result } ] }}"
      always:
        # WRITE RESULTS TO FILE
        - name: Remove existing log files
          local_action: file path={{ result_file }} state=absent
          become: false

        - name: Save result to file
          when: log_results
          local_action: copy content={{ tests | to_nice_yaml(indent=2) }} dest={{ result_file }}
          become: false
      tags: cleanup

    # Handled exceptions show up as failures in Ansible but the playbook
    # itself does not return 0, so explicitly fail the test by checking
    # the test results
    - name: Explicitly fail based on test results
      when: item['result']|lower == "failed"
      fail:
        msg: "Failure found in test"
      with_items: "{{ tests }}"
